# Day 11 https://adventofcode.com/2024/day/11
import itertools as it
from tqdm import tqdm
# Read the initial set of stones
with open("day11/input.txt") as f:
	initial_stones = f.read().strip().split()

mem = {}

def blink(stone:str, times:int) -> int:
	""" Compute how many stones are generated by blinking times  """

	if (stone, times) in mem:
		return mem[(stone, times)]
	
	if times == 0:
		total = 1
	else:
	
		total = 0

		match stone:
			case "0":
				total +=  blink("1", times-1)
			case even if len(even) % 2 == 0:

				pivot = len(even)//2
				left = ''.join(it.dropwhile(lambda n: n == "0", even[:pivot]))
				if not left:
					left = "0"
				right = ''.join(it.dropwhile(lambda n: n == "0", even[pivot:]))
				if not right:
					right = "0"


				total +=  blink(left, times-1)
				total +=  blink(right, times-1)
			case odd:
				total +=  blink(str(int(odd)*2024), times-1)

	mem[(stone, times)] = total
	return total


num_blinks = 75
total_stones = 0
for stone in tqdm(initial_stones):
	total_stones += blink(stone, num_blinks)

print(f'{total_stones}')